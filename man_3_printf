.\" Automatically generated by Pandoc 2.5
.\"
.TH "FUNTION PRINTF" "1" "July 28, 2021" "printf" "User Manual"
.hy
.SH NAME
.PP
_printf \- our version of printf.
.SH SYNOPSIS
.PP
The function takes the arguments \f[B]\[lq]char * format\[rq]\f[R] and
the \f[B]\[lq]va_list\[rq]\f[R] and initially goes through
\f[B]\[lq]format\[rq]\f[R] in order to identify a differentiating
character \f[B]\[lq]%\[rq]\f[R] that indicates that the next character
is going to make use of one of the specifiers of conversion (% i,% d,%
u,% f, etc).
If this character is found, the **\[dq]_casesFormat ()\[lq]** function
uses the \f[B]\[dq]switch\[dq]\f[R] conditional to verify that the
conversion specifier is the same as defined in the
\f[B]\[dq]cases\[dq]\f[R] and executes the activity defined within each
corresponding\[rq]case\[lq]. Each \[lq]case\[rq] replaces the
\f[B]\[lq]%\[rq]\f[R] characters and the conversion specifier, with the
arguments defined in the va_list.
The result of this is the printing on the screen of the characters
defined in the \f[B]\[lq]format\[rq]\f[R] argument, which are contained
in a buffer, and the \f[B]\[lq]va_list\[rq]\f[R] argument.
.PP
\f[I]Compile\f[R] #include \[lq]holberton.h\[rq] $ gcc \-Wall \-Wextra
\-Werror \-pedantic \-std=gnu89 \-Wno\-format *.c
.PP
\f[I]Usage\f[R] int _printf(const char *format, \&...); \[lq]format\[rq]
refers to a string with any number of specifiers followed by a `%'
symbol.
.PP
\f[I]Example\f[R] \f[B]Input\f[R] _printf(\[lq]String:[%s]\[rq], \[lq]I
am a string !\[rq]); \f[B]Output\f[R] String:[I am a string !].RE
.SH DESCRIPTION
.PP
This activity corresponds to a project defined in the curriculum
established by Holberton School which directs us to the creation of a
function that executes the functionalities of the \[lq]printf\[rq]
function established in the standard library .
It is an activity in pairs and in collaborative use of the github
repository tools.
.PP
\f[B]Return Value\f[R] Upon successful return, these functions return
the number of characters printed, which exclude the terminating null
byte (`\[rs]0').
.SH THE FLAG CHARACTERS
.PP
Flag characters are currently in development phase.
.SH THE LENGTH MODIFIERS
.PP
Length modifiers are currently in development phase.
.SH THE CONVERSION SPECIFIERS
.PP
Current arguments handled by conversion specifiers:
.TP
.B \f[B]c\f[R]
The integer or char argument converts to an unsigned char, and the
resulting character is written.
.TP
.B \f[B]s\f[R]
The argument shall be a literal string.
No special provisions are made for multibyte characters.The behavior of
printf with the s conversion specifier is undefined if the argument
value is not a pointer to a literal string.
Characters from the literal string array are written up to, but not
including, the terminating null byte (`\[rs]0').
.TP
.B \f[B]%\f[R]
A % character is written and no argument is converted.
The complete conversion specification is `%%'.
.TP
.B \f[B]b\f[R]
The unsigned int argument is converted to binary.
.TP
.B \f[B]d, i\f[R]
The int argument is converted to signed decimal notation.
.SH AUTHOR
.PP
Alejandro Alomia and Adrian Felipe Ceron
